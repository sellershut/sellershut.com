syntax = "proto3";

package category;

// The Category Query service
service QueryCategories {
  // gets all categories
  rpc Categories (Paginate) returns (Response) {}
  rpc CategoryById (SearchQuery) returns (SimpleResponse) {}
  rpc SubCategories (SearchQueryOptional) returns (Response) {}
  rpc Search (SearchQuery) returns (Response) {}
}

// Category Mutation Service
service MutateCategories {
  // Create a category
  rpc Create (Category) returns (SimpleResponse) {}
  // Update a category
  rpc Update (Category) returns (SimpleResponse) {}
  // Delete a category
  rpc Delete (SearchQuery) returns (SimpleResponse) {}
}

// A category
message Category {
  string id = 1; // A unique identifier, it should be a v7 uuid
  string name = 2; // Human readable name
  repeated string sub_categories = 3; // A list of sub categories of this current category
  optional string image_url = 4; // An optional image denoting this category
  optional string parent_id = 5; // The direct parent of this category (if applicable)
  int64 created_at = 6; // Timestamp (millisecond precision) indicating when this category was created
  int64 updated_at = 7; // Timestamp (millisecond precision) indicating when this category was last updated
}

// A response node
message Node {
    // A category
    Category node = 1;
    // Pagination cursor
    string cursor = 2;
}

// Connection contains a list of Node objects and the pagination information.
message Connection {
  // The list of nodes in the current page.
  repeated Node edges = 1;
  // Information about the pagination state.
  PageInfo pageInfo = 2;
}

// QueryResponse
message Response {
  Status status = 1; // response status
  Connection connection = 2; // The connection object containing the paginated data.
}

// MutationResponse
message SimpleResponse {
  Status status = 1; // response status
  optional Category category = 2; // data
}

// An empty message
message Empty {}

// Pagination
message Paginate {
    // Cursor indicating the position after which results should be fetched.
    optional string after = 1;
    
    // Cursor indicating the position before which results should be fetched.
    optional string before = 2;
    
    // Maximum number of results to fetch starting after the "after" cursor.
    optional int32 first = 3;
    
    // Maximum number of results to fetch ending before the "before" cursor.
    optional int32 last = 4;
}

// A message holding an optional string, for string based searching
message SearchQueryOptional {
  optional string query = 1; // A parameter sent in with requests
  // Pagination
  Paginate pagination = 2;
}

// A message holding a string, for string based searching
message SearchQuery{
  string query = 1; // A parameter sent in with requests
  // Pagination
  Paginate pagination = 2;
}

// Response status
message Status {
  // The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
  int32 code = 1;

  // A developer-facing error message, which should be in English. Any
  // user-facing error message should be localized and sent in the
  // [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
  string message = 2;

  // A list of messages that carry the error details.  There is a common set of
  // message types for APIs to use.
  // repeated google.protobuf.Any details = 3;
}

// PageInfo represents information about the pagination state.
message PageInfo {
  // Whether there is a next page available.
  bool hasNextPage = 1;
  // Whether there is a previous page available.
  bool hasPreviousPage = 2;
  // The cursor marking the start of the current page.
  optional string startCursor = 3;
  // The cursor marking the end of the current page.
  optional string endCursor = 4;
}
